Petite Chez Scheme Version 8.4
Copyright (c) 1985-2011 Cadence Research Systems

> (load "full-evalo.scm")
> (run 1 (q) (evalo '(int-exp (1 1)) q))
((int-val (1 1)))
> (run 1 (q) (evalo '(int-exp (0 1 1)) q))
((int-val (0 1 1)))
> (run 1 (q) (eval-expo '(int-exp (0 1 1)) '() q))
((int-val (0 1 1)))
> (run 1 (q) (eval-expo q '() '(int-val (0 1 1))))
((int-exp (0 1 1)))
> (run 2 (q) (eval-expo q '() '(int-val (0 1 1))))
((int-exp (0 1 1))
 ((lambda () (int-exp (0 1 1)))))
> (run 3 (q) (eval-expo q '() '(int-val (0 1 1))))
((int-exp (0 1 1))
  ((lambda () (int-exp (0 1 1))))
  (sub1 (int-exp (1 1 1))))
> (run 10 (q) (eval-expo q '() '(int-val (0 1 1))))
((int-exp (0 1 1)) ((lambda () (int-exp (0 1 1)))) (sub1 (int-exp (1 1 1)))
  (((lambda (_.0) (int-exp (0 1 1))) '_.1)
    (=/= ((_.0 int-exp)))
    (absento
      (closure _.0)
      (closure _.1)
      (int-val _.0)
      (int-val _.1)))
  (* (int-exp (1)) (int-exp (0 1 1)))
  (* (int-exp (0 1 1)) (int-exp (1)))
  (* (int-exp (0 1)) (int-exp (1 1)))
  (((lambda (_.0) (int-exp (0 1 1))) (list))
    (=/= ((_.0 int-exp)))
    (absento (closure _.0) (int-val _.0)))
  ((lambda () ((lambda () (int-exp (0 1 1))))))
  (sub1 ((lambda () (int-exp (1 1 1))))))
> (run 50 (q) (eval-expo q '() '(int-val (0 1 1))))
((int-exp (0 1 1)) ((lambda () (int-exp (0 1 1))))
 (sub1 (int-exp (1 1 1)))
 (((lambda (_.0) (int-exp (0 1 1))) '_.1)
   (=/= ((_.0 int-exp)))
   (absento
     (closure _.0)
     (closure _.1)
     (int-val _.0)
     (int-val _.1)))
 (* (int-exp (1)) (int-exp (0 1 1)))
 (* (int-exp (0 1 1)) (int-exp (1)))
 (* (int-exp (0 1)) (int-exp (1 1)))
 (((lambda (_.0) (int-exp (0 1 1))) (list))
   (=/= ((_.0 int-exp)))
   (absento (closure _.0) (int-val _.0)))
 ((lambda () ((lambda () (int-exp (0 1 1))))))
 (sub1 ((lambda () (int-exp (1 1 1)))))
 ((lambda () (sub1 (int-exp (1 1 1)))))
 (* (int-exp (1 1)) (int-exp (0 1)))
 (car (list (int-exp (0 1 1))))
 (((lambda (_.0 _.1) (int-exp (0 1 1))) '_.2 '_.3)
   (=/= ((_.0 int-exp)) ((_.1 int-exp)))
   (absento (closure _.0) (closure _.1) (closure _.2)
     (closure _.3) (int-val _.0) (int-val _.1) (int-val _.2)
     (int-val _.3)))
 ((car (list (int-exp (0 1 1)) '_.0))
   (absento (closure _.0) (int-val _.0)))
 (sub1 (sub1 (int-exp (0 0 0 1))))
 (((lambda () ((lambda (_.0) (int-exp (0 1 1))) '_.1)))
   (=/= ((_.0 int-exp)))
   (absento
     (closure _.0)
     (closure _.1)
     (int-val _.0)
     (int-val _.1)))
 ((sub1 ((lambda (_.0) (int-exp (1 1 1))) '_.1))
   (=/= ((_.0 int-exp)))
   (absento
     (closure _.0)
     (closure _.1)
     (int-val _.0)
     (int-val _.1)))
 (((lambda (_.0) (int-exp (0 1 1))) #t)
   (=/= ((_.0 int-exp)))
   (absento (closure _.0) (int-val _.0)))
 (((lambda (_.0) (sub1 (int-exp (1 1 1)))) '_.1)
   (=/= ((_.0 int-exp)) ((_.0 sub1)))
   (absento
     (closure _.0)
     (closure _.1)
     (int-val _.0)
     (int-val _.1)))
 (((lambda (_.0) ((lambda () (int-exp (0 1 1))))) '_.1)
   (=/= ((_.0 int-exp)) ((_.0 lambda)))
   (absento
     (closure _.0)
     (closure _.1)
     (int-val _.0)
     (int-val _.1)))
 (car (list (int-exp (0 1 1)) (list)))
 ((car (list (int-exp (0 1 1)) '_.0 '_.1))
   (absento
     (closure _.0)
     (closure _.1)
     (int-val _.0)
     (int-val _.1)))
 ((lambda () (* (int-exp (1)) (int-exp (0 1 1)))))
 ((lambda () (* (int-exp (0 1 1)) (int-exp (1)))))
 (sub1 (* (int-exp (1)) (int-exp (1 1 1))))
 (sub1 (* (int-exp (1 1 1)) (int-exp (1))))
 ((if '#t (int-exp (0 1 1)) _.0)
   (absento (closure _.0) (int-val _.0)))
 ((if '#f _.0 (int-exp (0 1 1)))
   (absento (closure _.0) (int-val _.0)))
 (car (list (int-exp (0 1 1)) #t))
 ((lambda () (* (int-exp (0 1)) (int-exp (1 1)))))
 (* (int-exp (0 1 1)) (sub1 (int-exp (0 1))))
 (* (int-exp (1)) ((lambda () (int-exp (0 1 1)))))
 (* (int-exp (0 1 1)) ((lambda () (int-exp (1)))))
 (((lambda () ((lambda (_.0) (int-exp (0 1 1))) (list))))
   (=/= ((_.0 int-exp)))
   (absento (closure _.0) (int-val _.0)))
 (((lambda (_.0) (sub1 (int-exp (1 1 1)))) (list))
   (=/= ((_.0 int-exp)) ((_.0 sub1)))
   (absento (closure _.0) (int-val _.0)))
 ((if #t (int-exp (0 1 1)) _.0)
   (absento (closure _.0) (int-val _.0)))
 (* (int-exp (0 1)) ((lambda () (int-exp (1 1)))))
 ((sub1 ((lambda (_.0) (int-exp (1 1 1))) (list)))
   (=/= ((_.0 int-exp)))
   (absento (closure _.0) (int-val _.0)))
 ((car (list (int-exp (0 1 1)) '_.0 (list)))
   (absento (closure _.0) (int-val _.0)))
 (* (int-exp (1 1)) ((lambda () (int-exp (0 1)))))
 ((car (list (int-exp (0 1 1)) (list) '_.0))
   (absento (closure _.0) (int-val _.0)))
 (((lambda (_.0) ((lambda () (int-exp (0 1 1))))) (list))
   (=/= ((_.0 int-exp)) ((_.0 lambda)))
   (absento (closure _.0) (int-val _.0)))
 ((car (list (int-exp (0 1 1)) '_.0 '_.1 '_.2))
   (absento (closure _.0) (closure _.1) (closure _.2)
     (int-val _.0) (int-val _.1) (int-val _.2)))
 (((lambda (_.0 _.1) (int-exp (0 1 1))) '_.2 (list))
   (=/= ((_.0 int-exp)) ((_.1 int-exp)))
   (absento (closure _.0) (closure _.1) (closure _.2)
     (int-val _.0) (int-val _.1) (int-val _.2)))

 ((car (cons (int-exp (0 1 1)) '_.0))

   (absento (closure _.0) (int-val _.0)))
 (((lambda (_.0) ((lambda (_.1) (int-exp (0 1 1))) '_.2))
    '_.3)
   (=/= ((_.0 int-exp))
        ((_.0 lambda))
        ((_.0 quote))
        ((_.1 int-exp)))
   (absento (closure _.0) (closure _.1) (closure _.2)
     (closure _.3) (int-val _.0) (int-val _.1) (int-val _.2)
     (int-val _.3)))
 ((lambda () ((lambda () ((lambda () (int-exp (0 1 1))))))))
 ((lambda () (sub1 ((lambda () (int-exp (1 1 1)))))))
 ((lambda () ((lambda () (sub1 (int-exp (1 1 1))))))))
> (car (cons 6 '_.0))
6
> (lambda (s) (lambda (z) (s (s (s z)))))
#<procedure>
> (((lambda (s) (lambda (z) (s (s (s z))))) add1) 0)
3
> (((lambda (s) (lambda (z) (s (s (s z))))) cons) '())

Exception: incorrect argument count in call (s z)
Type (debug) to enter the debugger.
> (((lambda (s) (lambda (z) (s (s (s z))))) list) '())
(((())))
> (((lambda (s) (lambda (z) (s (s (s z))))) (lambda (x) (list 'succ x))) '())
(succ (succ (succ ())))
> 